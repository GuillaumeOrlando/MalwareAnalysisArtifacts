path = "C:\\Users\\HomardBoy\\Desktop\\UnpackMe_PhoenixProtector.exe"

def is_PE(content):
    if str(content)[:4] == "4d5a":
        print("[+] Valid PE file ('MZ' magic bytes)")
    else:
        print("[-] Not a valid PE file (no magic byte)")
        exit(1)

def extract_data(content, size, pos1, pos2, pos3, pos4):
    if size == 2:
        data = str(fileContent)[2*pos2:][:2] + str(fileContent)[2*pos1:][:2]
        return(data)

def extract_DOS_stub(content, offset):
    data = str(fileContent)[4:].split("\\x")[offset]
    print(data)


with open(path, mode="rb") as file:
    fileContent = file.read().hex()
    #print(fileContent)
    is_PE(fileContent)

    # DOS Header

    BytesOnLastPage = extract_data(fileContent, 2, 2, 3, 'none', 'none')
    PagesInFile = extract_data(fileContent, 2, 4, 5, 'none', 'none')
    Relocations = extract_data(fileContent, 2, 6, 7, 'none', 'none')
    SizeOfHeader = extract_data(fileContent, 2, 8, 9, 'none', 'none')
    MinExtraParagraphs = extract_data(fileContent, 2, 10, 11, 'none', 'none')
    MaxExtraParagraphs = extract_data(fileContent, 2, 12, 13, 'none', 'none')
    InitialSS = extract_data(fileContent, 2, 14, 15, 'none', 'none')
    InitialSP = extract_data(fileContent, 2, 16, 17, 'none', 'none')
    Checksum = extract_data(fileContent, 2, 18, 19, 'none', 'none')
    InitialIP = extract_data(fileContent, 2, 20, 21, 'none', 'none')
    InitialCS = extract_data(fileContent, 2, 22, 23, 'none', 'none')
    FileAddrRelocTable = extract_data(fileContent, 2, 24, 25, 'none', 'none')
    OverlayNumber = extract_data(fileContent, 2, 26, 27, 'none', 'none')
    OEMIdentifier = extract_data(fileContent, 2, 28, 29, 'none', 'none')
    OEMinfo = extract_data(fileContent, 2, 30, 31, 'none', 'none')
    for x in range(32,100):
        data = str(fileContent)[2*x:][:2]
        if str(data) == "80":
            if str(fileContent)[2*x + 1:][:2] + str(fileContent)[2*x + 2:][:2] + str(fileContent)[2*x + 3:][:2] == "000000":
                print("[+] PE Signature Offset (pos:" + str(x) + ")")
                FileAddrCOFFHeader_pos = x
                break
            else:
                print("[-] Invalid PE Signature Offset")
                exit(1)

    Total_dos_header = fileContent[4:][:FileAddrCOFFHeader_pos*2][:-4]
    dos_header_size = str(len(Total_dos_header)/2).split(".")[0]
    print("[+] Got DOS Header (size: " + dos_header_size + " bytes)")

    FileAddrCOFFHeader = extract_data(fileContent, 2, FileAddrCOFFHeader_pos, FileAddrCOFFHeader_pos + 1, 'none', 'none')

    # DOS stub

    dos_stub = ""
    for x in range(FileAddrCOFFHeader_pos + 4,(FileAddrCOFFHeader_pos + 4) + 64 ):
        dos_stub = str(dos_stub) + str(fileContent)[2 * x:][:2]
    len_dos_stub = str(len(dos_stub)/2).split(".")[0]
    if "546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e" in str(dos_stub) and str(len_dos_stub) == "64":
        print("[+] Valid DOS stub")
    else:
        print("[-] Cannot find the DOS stub found")
        exit(1)

    # PE Signature
    PE_signature_base_pos = FileAddrCOFFHeader_pos + 4 + 64
    PE_signature = ""
    for x in range(0,4):
        PE_signature = str(PE_signature) + str(fileContent)[2 * (PE_signature_base_pos + x):][:2]
    if str(PE_signature) == "50450000":
        print("[+] Valid PE Signature (50 45 00 00)")
    else:
        print("[-] Invalid PE Signature")
        exit(1)

    # PE File Header (COFF Header)
    PE_file_header_base_pos = PE_signature_base_pos + 4
    PE_file_header = ""
    for x in range(0,18):
        PE_file_header = str(PE_file_header) + str(fileContent)[2 * (PE_file_header_base_pos + x):][:2]
    Machine = str(PE_file_header[:4][2:]) + str(PE_file_header[:4][:2])
    NumberOfSections = str(PE_file_header[:8][4:][2:]) + str(PE_file_header[:8][4:][:2])
    print("[+] " + str(NumberOfSections.lstrip("0")) + " Sections Founds")
    Timestamp = str(PE_file_header[:12][10:]) + str(PE_file_header[:10][8:]) +   str(PE_file_header[:16][14:]) + str(PE_file_header[:11][9:])
    #print(PE_file_header)
    print("[+] COFF Header infos")

    # PE Optional Header 22000b01
    PE_optional_header_base_pos = PE_file_header_base_pos + 18
    Architecture = str(fileContent)[2 * PE_optional_header_base_pos + 6:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 4:][:2]
    if str(Architecture) == "010b":
        Architecture = str(Architecture) + " (x86)"
        print("[+] Architecture x86")
    else:
        Architecture = str(Architecture) + " (x64)"
        print("[+] Architecture x64")
    MajorLinkerVersion = str(fileContent)[2 * PE_optional_header_base_pos + 8:][:2]
    MinorLinkerVersion = str(fileContent)[2 * PE_optional_header_base_pos + 10:][:2]
    SizeOfCode = str(fileContent)[2 * PE_optional_header_base_pos + 16:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 18:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 14:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 12:][:2]
    SizeOfInitData = str(fileContent)[2 * PE_optional_header_base_pos + 24:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 26:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 22:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 20:][:2]
    SizeOfUninitData = str(fileContent)[2 * PE_optional_header_base_pos + 32:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 34:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 30:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 28:][:2]
    EOP = str(fileContent)[2 * PE_optional_header_base_pos + 40:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 42:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 38:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 36:][:2]
    print("[+] EntryPoint: 0x" + str(EOP))
    BaseOfCode = str(fileContent)[2 * PE_optional_header_base_pos + 48:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 50:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 46:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 44:][:2]
    BaseOfData = str(fileContent)[2 * PE_optional_header_base_pos + 56:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 58:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 54:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 52:][:2]
    ImageBase = str(fileContent)[2 * PE_optional_header_base_pos + 64:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 66:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 62:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 60:][:2]
    SectionAlignment = str(fileContent)[2 * PE_optional_header_base_pos + 72:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 74:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 70:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 68:][:2]
    FileAlignment = str(fileContent)[2 * PE_optional_header_base_pos + 80:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 82:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 78:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 76:][:2]
    MajorOSVersion = str(fileContent)[2 * PE_optional_header_base_pos + 86:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 84:][:2]
    MinorOSVersion = str(fileContent)[2 * PE_optional_header_base_pos + 90:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 88:][:2]
    MajorImageVersion = str(fileContent)[2 * PE_optional_header_base_pos + 94:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 92:][:2]
    MinorImageVersion = str(fileContent)[2 * PE_optional_header_base_pos + 98:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 96:][:2]
    MajorSubsystemVersion = str(fileContent)[2 * PE_optional_header_base_pos + 102:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 100:][:2]
    MinorSubsystemVersion = str(fileContent)[2 * PE_optional_header_base_pos + 106:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 104:][:2]
    unk = str(fileContent)[2 * PE_optional_header_base_pos + 110:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 108:][:2]
    SizeOfImage = str(fileContent)[2 * PE_optional_header_base_pos + 112:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 116:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 118:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 114:][:2]
    SizeOfHeaders = str(fileContent)[2 * PE_optional_header_base_pos + 120:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 124:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 126:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 122:][:2]
    Checksum = str(fileContent)[2 * PE_optional_header_base_pos + 128:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 132:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 134:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 130:][:2]
    Subsystem = str(fileContent)[2 * PE_optional_header_base_pos + 138:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 140:][:2]
    DLLCharacteristics = str(fileContent)[2 * PE_optional_header_base_pos + 146:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 144:][:2]
    SizeOfStackReserve = str(fileContent)[2 * PE_optional_header_base_pos + 154:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 152:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 150:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 148:][:2]
    SizeOfStackCommit = str(fileContent)[2 * PE_optional_header_base_pos + 162:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 160:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 158:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 156:][:2]
    SizeOfHeapReserve = str(fileContent)[2 * PE_optional_header_base_pos + 170:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 168:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 166:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 164:][:2]
    SizeOfHeapCommit = str(fileContent)[2 * PE_optional_header_base_pos + 178:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 176:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 174:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 172:][:2]
    LoaderFlags = str(fileContent)[2 * PE_optional_header_base_pos + 186:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 184:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 182:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 180:][:2]
    DirectoriesLength = str(fileContent)[2 * PE_optional_header_base_pos + 194:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 192:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 190:][:2] + str(fileContent)[2 * PE_optional_header_base_pos + 188:][:2]


    print("")
    print("Detail: ")
    print("- BytesOnLastPage: " + BytesOnLastPage)
    print("- PagesInFile: " + PagesInFile)
    print("- Relocations: " + Relocations)
    print("- SizeOfHeader: " + SizeOfHeader)
    print("- MinExtraParagraphs: " + MinExtraParagraphs)
    print("- MaxExtraParagraphs: " + MaxExtraParagraphs)
    print("- InitialSS: " + InitialSS)
    print("- InitialSP: " + InitialSP)
    print("- Checksum: " + Checksum)
    print("- InitialIP: " + InitialIP)
    print("- InitialCS: " + InitialCS)
    print("- FileAddrRelocTable: " + FileAddrRelocTable)
    print("- OverlayNumber: " + OverlayNumber)
    print("- OEMIdentifier: " + OEMIdentifier)
    print("- OEMinfo: " + OEMinfo)
    print("- FileAddrCOFFHeader: " + FileAddrCOFFHeader)
    print("- Machine: " + Machine)
    print("- NumberOfSections: " + NumberOfSections)
    print("- Timestamp: " + Timestamp)
    print("- Architecture: " + Architecture)
    print("- MajorLinkerVersion: " + MajorLinkerVersion)
    print("- MajorLinkerVersion: " + MinorLinkerVersion)
    print("- SizeOfCode: " + SizeOfCode)
    print("- SizeOfInitData: " + SizeOfInitData)
    print("- SizeOfUninitData: " + SizeOfUninitData)
    print("- EOP: " + EOP)
    print("- BaseOfCode: " + BaseOfCode)
    print("- BaseOfData: " + BaseOfData)
    print("- ImageBase: " + ImageBase)
    print("- SectionAlignment: " + SectionAlignment)
    print("- FileAlignment: " + FileAlignment)
    print("- MajorOSVersion: " + MajorOSVersion)
    print("- MinorOSVersion: " + MinorOSVersion)
    print("- MajorImageVersion: " + MajorImageVersion)
    print("- MinorImageVersion: " + MinorImageVersion)
    print("- MajorSubsystemVersion: " + MajorSubsystemVersion)
    print("- MinorSubsystemVersion: " + MinorSubsystemVersion)
    print("- SizeOfImage: " + SizeOfImage)
    print("- SizeOfHeaders: " + SizeOfHeaders)
    print("- Checksum: " + Checksum)
    print("- Subsystem: " + Subsystem)
    print("- DLLCharacteristics: " + DLLCharacteristics)
    print("- SizeOfStackReserve: " + SizeOfStackReserve)
    print("- SizeOfStackCommit: " + SizeOfStackCommit)
    print("- SizeOfHeapReserve: " + SizeOfHeapReserve)
    print("- SizeOfHeapCommit: " + SizeOfHeapCommit)
    print("- LoaderFlags: " + LoaderFlags)
    print("- DirectoriesLength: " + DirectoriesLength)

    #https://www.red-gate.com/simple-talk/blogs/anatomy-of-a-net-assembly-pe-headers/
