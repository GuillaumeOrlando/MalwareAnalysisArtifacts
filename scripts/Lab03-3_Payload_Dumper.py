#!/usr/bin/env python

import os
import sys
import pefile
import binascii

def arg_check():
    if len(sys.argv) == 2:
        if not os.path.isfile(sys.argv[1]):
            print("[-] The specified file does not exist")
            exit(1)
        return(sys.argv[1])
    else:
        print("Error: You must suply the relative path of the binary to deal with.")
        print("Usage: " + str(sys.argv[0]) + " <relative/path/>")

exe_path = arg_check()
pe = pefile.PE(exe_path)
if hex(pe.DOS_HEADER.e_magic) == "0x5a4d":
    print("[+] Valid PE file (magic byte)")
else:
    print("[-] Invalid PE file (no magic byte)")

enc_rscr = ""
enc_array = []
decoded_array = []
decoded_string = ""
plain_rscr = ""
offset = 0x0
size = 0x0

for rscr in pe.DIRECTORY_ENTRY_RESOURCE.entries:
    for entry in rscr.directory.entries:
        if entry.name is not None:
            print("[+] " + str(entry) + " <Name: " + str(entry.name.__str__() + ">")) 
            offset = entry.directory.entries[0].data.struct.OffsetToData
            size = entry.directory.entries[0].data.struct.Size

try:
    enc_rscr = pe.get_memory_mapped_image()[offset:offset+size]
except:
    print("[-] Cannot extract rscr data")
    exit(1)

print("[+] Encoded resource extracted")

hex_data_enc = ":".join("{:02x}".format(ord(c)) for c in enc_rscr)

xor_key = []
xor_key.append("0x41")
nb_elem = hex_data_enc.count(":") + 1
#print(nb_elem)
for x in range(0, nb_elem):
    encoded_byte = "0x" + hex_data_enc.split(":")[x]
    enc_array.append(encoded_byte)
    result = hex(int(enc_array[x], 16) ^ int(xor_key[0], 16))
    if len(str(result).replace("0x","")) == 1:
        d = str(result).replace("0x","") 
        if str(d) == "a":
            result = "0x0a"
        elif str(d) == "b":
            result = "0x0b"
        elif str(d) == "c":
            result = "0x0c"
        elif str(d) == "d":
            result = "0x0d"
        elif str(d) == "e":
            result = "0x0e"
        elif str(d) == "f":
            result = "0x0f"
        elif str(d) == "0":
            result = "0x00"
        else:
            result = result
#    print(result)
    decoded_string += str(result).replace("0x0","0x00").replace("0x","")

#print(decoded_string)

print("[+] Resource file decoded")
f = open("dump.exe","wb")
formated_string = binascii.a2b_hex(decoded_string)
f.write(formated_string)
f.close()

print("[+] Dump done: dump.exe")

