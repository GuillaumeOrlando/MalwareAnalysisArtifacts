from idautils import *
from idaapi import *
from idc import *

# Perform the actual decoding
def decoder(encoded, key):
	counter = 0
	decodedString = ""
	for byte in encoded:
		if (counter == len(key)):
			counter = 0
		decodedChar = int(byte, 16) ^ ord(key[counter])
		if (decodedChar == 0x0):
			return decodedString
		decodedString += chr(decodedChar)
		counter += 1

# Get the bytes from the given dword
def extractBytes(addr):
	memArray = []
	counter = 0 #We don't know the lenght, we"r gonna take 150 bytes, it should be more than enough
  	for x in range(0, 150):
		dataByte = hex(Byte(addr))
		memArray.append(dataByte)
    		addr += 1
  	return memArray

# Get the dword passed as argument to the function
def getArg(funcAddr):
	addr = idc.PrevHead(funcAddr)
	opcode= GetMnem(addr)
	if opcode == "push":
		value = GetOperandValue(addr, 0)
		return value

for addr in XrefsTo(0x030A3400, flags=0):
	key = "YI,rTfy#F3Maq13if"
	argDword = getArg(addr.frm)
	encodedBlob = extractBytes(argDword)
	resolved = decoder(encodedBlob, key)
	print(hex(addr.frm) + ": " + str(resolved))
	comment = "Decoded: " + str(resolved)
	MakeComm(addr.frm, comment)