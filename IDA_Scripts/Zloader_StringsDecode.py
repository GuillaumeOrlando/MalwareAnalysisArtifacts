from idautils import *
from idaapi import *
from idc import *

# Perform the actual decoding
def decoder(encoded, key):
	counter = 0
	decoded = ""
	decodedChar = ''
	while counter < 17:
		decodedChar = chr(ord(key[counter]) ^ int(encoded[counter],16))
		decoded += decodedChar
		counter += 1
		if counter == 17:
			return decoded

# Get the bytes from the given dword
def extractBytes(addr):
	memArray = []
	counter = 0 #We don't know the lenght, we"r gonna take 50 bytes, it should be more than enough
  	for x in range(0, 30):
		dataByte = hex(Byte(addr))
		memArray.append(dataByte)
    		addr += 1
  	return memArray

# Get the dword passed as argument to the function
def getArg(funcAddr):
	addr = idc.PrevHead(funcAddr)
	opcode= GetMnem(addr)
	if opcode == "push":
		value = GetOperandValue(addr, 0)
		return value

for addr in XrefsTo(0x030A3400, flags=0): # 0x030A3400 -> decoding function address
	key = "YI,rTfy#F3Maq13if"            # Should be one of the only available strings
	argDword = getArg(addr.frm)
	encodedBlob = extractBytes(argDword)
	resolved = decoder(encodedBlob, key)
	print(hex(addr.frm) + ": " + resolved)
	comment = "Decoded: " + str(resolved)
	MakeComm(addr.frm, comment)
