from idautils import *
from idaapi import *
from idc import *
import json

filename = "C:\\Users\\homardboy\\Desktop\\IDA Scripts\\zloader_resolved_api.json"
func_hash_API = 0x030A3170

# Retreive the api_hash function's arguments (dll code + API hash)
def getArgs(funcAddr):
    DllAddr = idc.PrevHead(funcAddr)
    HashAddr = idc.PrevHead(DllAddr)
    opcodeDLL = GetMnem(DllAddr)
    opcodeAPI = GetMnem(HashAddr)
    if opcodeDLL == "push":
        dll_name = Comment(DllAddr)
        if str(dll_name) != 'None': 
            dll = dll_name.split(": ")[1]
            if opcodeAPI == "push":
                APIhash = GetOperandValue(HashAddr, 0)
                return dll, APIhash
    return False, False # the hash is passed from a register, or a ptr, or something else

# Retreive the API name from the given dll + hash
def retreiveAPI(DLL, APIhash, Resolved):
    for dlls in range (0, len(Resolved)):
        if (DLL == Resolved[dlls][0]):
            for api in range (1, len(Resolved[dlls])):
                resolved_hash = str(Resolved[dlls][api].split(":")[1])
                if str(hex(APIhash)).replace("0x","").replace("L","") in resolved_hash:
                    result = str(Resolved[dlls][api].split(":")[0])
                    return result


resolved_dict = open(filename, "r")
api = json.load(resolved_dict)

for addr in XrefsTo(func_hash_API, flags=0):
    dll, APIhash = getArgs(addr.frm)
    resolved = retreiveAPI(dll, APIhash, api)
    if resolved != False:
        comment = "API: " + str(resolved)
        MakeComm(addr.frm, comment)
        print(hex(addr.frm), comment)
