# Guillaume Orlando
# 05/07/2020
# Decode all of the DLL's names resolved by Zloader. Add a comment on each DLL resolve call.

from idautils import *
from idaapi import *
from idc import *

decoder_string_addrr = 0x030A3400           # Address of the string decoder function
api_resolve_name = "func_API_Hash_Resolver" # Name of the API resolveer function
api_resolve_addr = 0x030A3170               # Address of the API resolveer function
key = "YI,rTfy#F3Maq13if"                   # Key: Should be one of the only available strings

def get_base_offset():
    for addr in XrefsTo(decoder_string_addrr, flags=0): 
        if (GetFunctionName(addr.frm) == api_resolve_name):
            addr = idc.PrevHead(addr.frm)
            baseOffset = GetOperandValue(addr, 0)
            return baseOffset

def extractBytes(addr):
	memArray = []
  	for x in range(0, 50):
		dataByte = hex(Byte(addr))
		memArray.append(dataByte)
    		addr += 1
  	return memArray

def decoder(encoded, key):
	counter = 0
	decodedString = ""
	for byte in encoded:
		if (counter == len(key)):
			counter = 0
		decodedChar = int(byte, 16) ^ ord(key[counter])
		if (decodedChar == 0x0):
			return decodedString
		decodedString += chr(decodedChar)
		counter += 1

baseOffset = get_base_offset()
for addr in XrefsTo(api_resolve_addr, flags=0): 
    prevAddr = idc.PrevHead(addr.frm)
    opcode = GetMnem(prevAddr)
    if (opcode == "push"):
        localOffset = GetOperandValue(prevAddr, 0)
        dllOffset = idc.Dword(baseOffset + (localOffset * 4))
        encoded = extractBytes(dllOffset)
        decode = decoder(encoded, key)
        print(hex(prevAddr), hex(dllOffset), decode)
        comment = "DLL: " + str(decode)
        MakeComm(prevAddr, comment)